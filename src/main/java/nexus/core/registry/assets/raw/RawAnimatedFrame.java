// automatically generated by the FlatBuffers compiler, do not modify

package nexus.core.registry.assets.raw;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RawAnimatedFrame extends Table {
  public static RawAnimatedFrame getRootAsRawAnimatedFrame(ByteBuffer _bb) { return getRootAsRawAnimatedFrame(_bb, new RawAnimatedFrame()); }
  public static RawAnimatedFrame getRootAsRawAnimatedFrame(ByteBuffer _bb, RawAnimatedFrame obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public RawAnimatedFrame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float timestamp() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public Mat4 localMatricies(int j) { return localMatricies(new Mat4(), j); }
  public Mat4 localMatricies(Mat4 obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 64, bb) : null; }
  public int localMatriciesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public Mat4 parentMatricies(int j) { return parentMatricies(new Mat4(), j); }
  public Mat4 parentMatricies(Mat4 obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o) + j * 64, bb) : null; }
  public int parentMatriciesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public Mat4 rootTransform() { return rootTransform(new Mat4()); }
  public Mat4 rootTransform(Mat4 obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startRawAnimatedFrame(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addTimestamp(FlatBufferBuilder builder, float timestamp) { builder.addFloat(0, timestamp, 0.0f); }
  public static void addLocalMatricies(FlatBufferBuilder builder, int localMatriciesOffset) { builder.addOffset(1, localMatriciesOffset, 0); }
  public static void startLocalMatriciesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(64, numElems, 4); }
  public static void addParentMatricies(FlatBufferBuilder builder, int parentMatriciesOffset) { builder.addOffset(2, parentMatriciesOffset, 0); }
  public static void startParentMatriciesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(64, numElems, 4); }
  public static void addRootTransform(FlatBufferBuilder builder, int rootTransformOffset) { builder.addStruct(3, rootTransformOffset, 0); }
  public static int endRawAnimatedFrame(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

