// automatically generated by the FlatBuffers compiler, do not modify

package nexus.core.registry.assets.raw;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RawModel extends Table {
  public static RawModel getRootAsRawModel(ByteBuffer _bb) { return getRootAsRawModel(_bb, new RawModel()); }
  public static RawModel getRootAsRawModel(ByteBuffer _bb, RawModel obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public RawModel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public boolean bones() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public float vertices(int j) { int o = __offset(8); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int verticesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer verticesAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer verticesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }
  public float textureCoordinates(int j) { int o = __offset(10); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int textureCoordinatesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer textureCoordinatesAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer textureCoordinatesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }
  public float normals(int j) { int o = __offset(12); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int normalsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer normalsAsByteBuffer() { return __vector_as_bytebuffer(12, 4); }
  public ByteBuffer normalsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 4); }
  public float tangents(int j) { int o = __offset(14); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int tangentsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer tangentsAsByteBuffer() { return __vector_as_bytebuffer(14, 4); }
  public ByteBuffer tangentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 4); }
  public int boneIds(int j) { int o = __offset(16); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int boneIdsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer boneIdsAsByteBuffer() { return __vector_as_bytebuffer(16, 4); }
  public ByteBuffer boneIdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 4); }
  public float boneWeights(int j) { int o = __offset(18); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int boneWeightsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer boneWeightsAsByteBuffer() { return __vector_as_bytebuffer(18, 4); }
  public ByteBuffer boneWeightsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 4); }
  public int indices(int j) { int o = __offset(20); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int indicesLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer indicesAsByteBuffer() { return __vector_as_bytebuffer(20, 4); }
  public ByteBuffer indicesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 4); }

  public static int createRawModel(FlatBufferBuilder builder,
      int nameOffset,
      boolean bones,
      int verticesOffset,
      int textureCoordinatesOffset,
      int normalsOffset,
      int tangentsOffset,
      int boneIdsOffset,
      int boneWeightsOffset,
      int indicesOffset) {
    builder.startObject(9);
    RawModel.addIndices(builder, indicesOffset);
    RawModel.addBoneWeights(builder, boneWeightsOffset);
    RawModel.addBoneIds(builder, boneIdsOffset);
    RawModel.addTangents(builder, tangentsOffset);
    RawModel.addNormals(builder, normalsOffset);
    RawModel.addTextureCoordinates(builder, textureCoordinatesOffset);
    RawModel.addVertices(builder, verticesOffset);
    RawModel.addName(builder, nameOffset);
    RawModel.addBones(builder, bones);
    return RawModel.endRawModel(builder);
  }

  public static void startRawModel(FlatBufferBuilder builder) { builder.startObject(9); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addBones(FlatBufferBuilder builder, boolean bones) { builder.addBoolean(1, bones, false); }
  public static void addVertices(FlatBufferBuilder builder, int verticesOffset) { builder.addOffset(2, verticesOffset, 0); }
  public static int createVerticesVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startVerticesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTextureCoordinates(FlatBufferBuilder builder, int textureCoordinatesOffset) { builder.addOffset(3, textureCoordinatesOffset, 0); }
  public static int createTextureCoordinatesVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startTextureCoordinatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNormals(FlatBufferBuilder builder, int normalsOffset) { builder.addOffset(4, normalsOffset, 0); }
  public static int createNormalsVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startNormalsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTangents(FlatBufferBuilder builder, int tangentsOffset) { builder.addOffset(5, tangentsOffset, 0); }
  public static int createTangentsVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startTangentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBoneIds(FlatBufferBuilder builder, int boneIdsOffset) { builder.addOffset(6, boneIdsOffset, 0); }
  public static int createBoneIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startBoneIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBoneWeights(FlatBufferBuilder builder, int boneWeightsOffset) { builder.addOffset(7, boneWeightsOffset, 0); }
  public static int createBoneWeightsVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startBoneWeightsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIndices(FlatBufferBuilder builder, int indicesOffset) { builder.addOffset(8, indicesOffset, 0); }
  public static int createIndicesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startIndicesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRawModel(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

