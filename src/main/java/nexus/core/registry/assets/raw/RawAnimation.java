// automatically generated by the FlatBuffers compiler, do not modify

package nexus.core.registry.assets.raw;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RawAnimation extends Table {
  public static RawAnimation getRootAsRawAnimation(ByteBuffer _bb) { return getRootAsRawAnimation(_bb, new RawAnimation()); }
  public static RawAnimation getRootAsRawAnimation(ByteBuffer _bb, RawAnimation obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public RawAnimation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public double duration() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public RawAnimatedFrame frames(int j) { return frames(new RawAnimatedFrame(), j); }
  public RawAnimatedFrame frames(RawAnimatedFrame obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int framesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createRawAnimation(FlatBufferBuilder builder,
      int nameOffset,
      double duration,
      int framesOffset) {
    builder.startObject(3);
    RawAnimation.addDuration(builder, duration);
    RawAnimation.addFrames(builder, framesOffset);
    RawAnimation.addName(builder, nameOffset);
    return RawAnimation.endRawAnimation(builder);
  }

  public static void startRawAnimation(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addDuration(FlatBufferBuilder builder, double duration) { builder.addDouble(1, duration, 0.0); }
  public static void addFrames(FlatBufferBuilder builder, int framesOffset) { builder.addOffset(2, framesOffset, 0); }
  public static int createFramesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFramesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRawAnimation(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

